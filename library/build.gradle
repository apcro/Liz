apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

// group='com.gitlab.liz'

android {
    compileSdkVersion project.sdkVersion

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion project.sdkVersion
        versionCode 11
        versionName "1.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'androidx.annotation', module: 'annotation'
    })

    implementation fileTree(dir: 'libs', include: ['*.jar'])


    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "com.google.android.material:material:1.2.0-alpha06"

    implementation "com.mikepenz:iconics-core:4.0.2"
    implementation "com.mikepenz:iconics-views:4.0.2"

    implementation "com.orhanobut:hawk:2.0.1"
    testImplementation 'junit:junit:4.13'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}